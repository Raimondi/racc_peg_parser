# vim:set ft=ruby:
class Peg::Parser

rule

grammar     : definitions END
definitions : definition
            | definitions definition   {result = val}
definition  : RULE expression          {result = val}
expression  : sequence
            | expression alternative   {result = val}
alternative : SLASH sequence           {result = val}
sequence    : # Empty
            | sequence prefix suffix   {result = val}
            | sequence suffix          {result = val}
prefix      : AND
            | NOT
suffix      : primary quantifier       {result = val}
            | primary
quantifier  : QUESTION
            | STAR
            | PLUS
primary     : IDENTIFIER
            | OPEN expression CLOSE    {result = val}
            | literal
            | CLASS
            | DOT
literal     : SQSTRING
            | DQSTRING
end

---- inner ----
  @yydebug=true
  def parse(tokens)
    @yydebug = true
    @tokens = tokens
    do_parse
  end

  def next_token
    token = @tokens.shift
    token
  end
