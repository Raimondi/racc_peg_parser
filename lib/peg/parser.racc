# vim:set ft=ruby:
class Peg::Parser

rule

grammar     : definitions END
definitions : definition
            | definitions definition   {result = val}
definition  : RULE expression   {result = val}
expression  : sequence
            | expression alternative   {result = val}
alternative : slash sequence   {result = val}
sequence    : # Empty
            | sequence prefix suffix   {result = val}
            | sequence suffix   {result = val}
prefix      : and
            | not
suffix      : primary quantifier   {result = val}
            | primary
quantifier  : question
            | star
            | plus
primary     : identifier
            | open expression close   {result = val}
            | literal
            | class
            | dot
# lexical syntax
identifier : IDENTIFIER
class      : CLASS
literal    : SQSTRING
           | DQSTRING
slash      : SLASH
and        : AND
not        : NOT
question   : QUESTION
star       : STAR
plus       : PLUS
open       : OPEN
close      : CLOSE
dot        : DOT

end

#---- inner ----
  #def parse(tokens)
  #  @yydebug = true
  #  @tokens = tokens
  #  do_parse
  #end

  #def on_error( *args )
  #  $stderr.puts "on_error called: args=#{args.inspect}"
  #end

  #def next_token
  #  token = @tokens.shift
  #  #puts "Token: #{token.inspect}"
  #  token
  #end

